import React, { useState, useCallback, useRef } from 'react';
import mammoth from 'mammoth';

interface JdInputProps {
  jobTitle: string;
  setJobTitle: (title: string) => void;
  setJdText: (text: string) => void;
  onEvaluate: () => void;
  isLoading: boolean;
  error: string | null;
  setError: (error: string | null) => void;
}

const formatBytes = (bytes: number, decimals = 2) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const dm = decimals < 0 ? 0 : decimals;
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
}

const readFileContent = async (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = async (event) => {
            try {
                if (file.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {
                    const arrayBuffer = event.target?.result;
                    if (arrayBuffer instanceof ArrayBuffer) {
                        const result = await mammoth.extractRawText({ arrayBuffer });
                        resolve(result.value);
                    } else {
                        reject(new Error('Failed to read ArrayBuffer from .docx file.'));
                    }
                } else if (file.type === 'text/plain') {
                    resolve(event.target?.result as string);
                } else {
                    reject(new Error(`Unsupported file type: ${file.name}. Please upload a .docx or .txt file.`));
                }
            } catch (error) {
                const message = error instanceof Error ? error.message : "Unknown error during file processing";
                reject(new Error(`Error processing file: ${message}`));
            }
        };
        reader.onerror = (error) => reject(error);

        if (file.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {
            reader.readAsArrayBuffer(file);
        } else if (file.type === 'text/plain') {
            reader.readAsText(file);
        } else {
             reject(new Error(`Unsupported file type: ${file.name}. Please upload a .docx or .txt file.`));
        }
    });
};

const JdInput: React.FC<JdInputProps> = ({ jobTitle, setJobTitle, setJdText, onEvaluate, isLoading, error, setError }) => {
  const [file, setFile] = useState<File | null>(null);
  const [isDragging, setIsDragging] = useState(false);
  const [isReadingFile, setIsReadingFile] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [jdText, setInternalJdText] = useState<string>('');

  const handleFile = useCallback(async (selectedFile: File | null) => {
    if (!selectedFile) return;

    if (selectedFile.size > 200 * 1024 * 1024) { // 200MB limit
        setError("File is too large. Limit is 200MB.");
        return;
    }
    
    setIsReadingFile(true);
    setError(null);
    try {
        const text = await readFileContent(selectedFile);
        setJdText(text);
        setInternalJdText(text);
        setFile(selectedFile);
        if (!jobTitle) {
            setJobTitle(selectedFile.name.replace(/\.[^/.]+$/, ""));
        }
    } catch (e: any) {
        setError(e.message);
        setFile(null);
        setJdText('');
        setInternalJdText('');
    } finally {
        setIsReadingFile(false);
    }
  }, [setJdText, setJobTitle, jobTitle, setError]);
  
  const handleRemoveFile = () => {
    setFile(null);
    setJdText('');
    setInternalJdText('');
    if (fileInputRef.current) {
        fileInputRef.current.value = "";
    }
  }

  const onDragEnter = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(true);
  };
  const onDragLeave = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(false);
  };
  const onDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
  };
  const onDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(false);
    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
      handleFile(e.dataTransfer.files[0]);
      e.dataTransfer.clearData();
    }
  };
  const onFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
        handleFile(e.target.files[0]);
    }
  };
  
  const triggerFileSelect = () => fileInputRef.current?.click();

  const isButtonDisabled = isLoading || isReadingFile || !jdText.trim() || !jobTitle.trim();

  return (
    <div className="space-y-8">
      <div className="text-center">
        <h1 className="text-3xl font-extrabold text-gray-100 tracking-tight flex items-center justify-center">
            <span role="img" aria-label="clipboard" className="text-4xl mr-3">üìã</span>
            ƒê√°nh gi√° m√¥ t·∫£ c√¥ng vi·ªác theo 12 y·∫øu t·ªë PwC
        </h1>
        <p className="text-gray-400 mt-2 max-w-2xl mx-auto">
            H√£y t·∫£i l√™n file m√¥ t·∫£ c√¥ng vi·ªác ƒë·ªÉ ƒë∆∞·ª£c h·ªá th·ªëng ƒë√°nh gi√° t·ª± ƒë·ªông.
        </p>
      </div>

      <div className="max-w-xl mx-auto space-y-6">
        <div>
          <label htmlFor="job-title" className="flex items-center gap-2 text-md font-bold text-gray-300 mb-2">
            <span className="text-blue-300 font-mono text-sm bg-blue-900/50 px-2 py-1 rounded">abc</span>
            Nh·∫≠p t√™n v·ªã tr√≠ c√¥ng vi·ªác
          </label>
          <input
            type="text"
            id="job-title"
            value={jobTitle}
            onChange={(e) => setJobTitle(e.target.value)}
            placeholder="e.g., Deputy Sorting Centers Manager"
            className="w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition duration-150 ease-in-out"
            disabled={isLoading || isReadingFile}
          />
        </div>

        <div>
            <label className="flex items-center gap-2 text-md font-bold text-gray-300 mb-2">
                <span className="text-emerald-300 font-mono text-sm bg-emerald-900/50 px-2 py-1 rounded">docx</span>
                T·∫£i l√™n JD (.docx, .txt)
            </label>
            <div
                onDragEnter={onDragEnter}
                onDragLeave={onDragLeave}
                onDragOver={onDragOver}
                onDrop={onDrop}
                className={`relative flex flex-col items-center justify-center p-8 border-2 border-dashed rounded-lg cursor-pointer transition-colors duration-200 ${isDragging ? 'border-emerald-500 bg-gray-800/50' : 'border-gray-600 hover:border-gray-500'}`}
                onClick={triggerFileSelect}
            >
                <input
                    type="file"
                    ref={fileInputRef}
                    onChange={onFileSelect}
                    accept=".doc,.docx,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,.txt"
                    className="hidden"
                    disabled={isLoading || isReadingFile}
                />
                {isReadingFile ? (
                    <>
                    <svg className="animate-spin h-8 w-8 text-emerald-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <p className="mt-2 text-gray-400">ƒêang ƒë·ªçc file...</p>
                    </>
                ) : file ? (
                    <div className="text-center text-gray-300">
                        <svg xmlns="http://www.w3.org/2000/svg" className="mx-auto h-12 w-12 text-emerald-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        <p className="mt-2 font-semibold">{file.name}</p>
                        <p className="text-sm text-gray-500">{formatBytes(file.size)}</p>
                        <button onClick={(e) => { e.stopPropagation(); handleRemoveFile(); }} className="mt-3 text-sm text-red-400 hover:text-red-300 font-semibold">
                            Remove File
                        </button>
                    </div>
                ) : (
                    <div className="text-center text-gray-400">
                        <svg xmlns="http://www.w3.org/2000/svg" className="mx-auto h-12 w-12" stroke="currentColor" fill="none" viewBox="0 0 48 48" aria-hidden="true">
                            <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8" strokeWidth={2} strokeLinecap="round" strokeLinejoin="round" />
                        </svg>
                        <p className="mt-2">
                            <span className="font-semibold text-emerald-400">Click to upload</span> or drag and drop
                        </p>
                        <p className="text-xs mt-1">DOCX or TXT (max 200MB)</p>
                    </div>
                )}
            </div>
        </div>

        <div className="flex justify-center">
            <button
              onClick={onEvaluate}
              disabled={isButtonDisabled}
              className="flex items-center justify-center w-full sm:w-auto px-8 py-4 bg-emerald-600 text-white font-bold rounded-lg shadow-lg hover:bg-emerald-700 disabled:bg-gray-600 disabled:cursor-not-allowed disabled:shadow-none transition-all duration-200 transform hover:scale-105 disabled:scale-100 focus:outline-none focus:ring-4 focus:ring-emerald-500/50"
            >
              {isLoading ? (
                <>
                  <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  ƒêang ƒë√°nh gi√°...
                </>
              ) : (
                <>
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4" />
                    </svg>
                    ƒê√°nh gi√° JD
                </>
              )}
            </button>
        </div>
      </div>
    </div>
  );
};

export default JdInput;
